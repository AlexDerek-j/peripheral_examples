cryptoacc_aescrypt

This example uses the CRYPTOACC module in the EFR32 Series 2 to accelerate the
AES encryption, descryption, and SHA hash functions of mbed TLS.

Note that mbed TLS APIs used in this project include alternative 
implementations(plugins) from Silicon Labs for some of the mbed TLS library 
functions, including AES, CCM, CMAC, ECC (ECP, ECDH, ECDSA, ECJPAKE), SHA1 and 
SHA256. The plugins use the AES and CRYPTO hardware modules to accelerate the 
standard mbed TLS library functions which are implemented in C. 

The user is expected to use this example only after installing the latest Gecko
SDK. Please refer to the mbed TLS section of the Gecko SDK documentation for 
more information on using mbed TLS on Silicon Labs devices. 

The example redirects standard I/O to the virtual serial port (VCOM) of the
Starter Kit. By default the serial port setting is 115200 bps and 8-N-1
configuration.

The user can select encryption (press 'e') or decryption (press 'd') of a
message which should be sent via the VCOM serial interface.

A hard-coded 256-bit key is used for encryption and decryption.

In encryption mode, the example will ask the user for a short phrase to generate
an initial vector used in the AES encryption process. The user may type any 
phrase ended by newline or limited to a maximum of 16 bytes.

After the short phrase, the user should start typing in the message to be
encrypted. The user may type any message ended by newline or limited to a
maximum of #define MAX_MESSAGE_SIZE_ENCRYPTION bytes.

Then the program will encrypt the message (plaintext), and print out the
ciphertext, preceded with the initial vector of 16 bytes and followed by a
message digest tag of 32 bytes. All data is converted to hexadecimal readable
text format before sent to the serial port.

The format is:
Initial Vector (16 bytes)|Ciphertext (maximum MAX_MESSAGE_SIZE_ENCRYPTION bytes)
|Message Digest Tag (32 bytes)

The user can copy the output and feed it back to the program for decryption
later. The user needs to press 'd' to run decryption mode.

In decryption mode, the example will expect to receive a decrypted message
in the same format as generated by the encryption (as shown above).

The example has been instrumented with code to count the number of clock cycles
spent in the encryption and decryption loops. The results are printed to stdout,
i.e. the VCOM serial port console.

To check the performance gain of CRYPTOACC acceleration, the user can switch 
off CRYPTOACC hardware acceleration by defining NO_CRYPTO_ACCELERATION symbol
in IDE setting.


How To Test:
1. Update the kit's firmware from the Simplicity Launcher (if necessary)
2. Build the project and download to the Starter Kit
3. Open any terminal program and connect to the device's VCOM port
   (Note: If using puTTY, Local echo must be set to force on)
4. Follow the instructions shown on the console.


Peripherals Used:
DC-DC
CRYPTOACC
HFXO   - 38.4 MHz
USART0 - 115200 baud, 8-N-1

Board:  Silicon Labs EFR32xG22 2.4 GHz 6 dBm Radio Board (BRD4182A) + 
        Wireless Starter Kit Mainboard (BRD4001A)
Device: EFR32MG22C224F512IM40
PA05 - USART1 TX
PA06 - USART1 RX
PB04 - Board Controller VCOM Enable